{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "motion-dock",
  "type": "registry:block",
  "title": "Motion Dock",
  "description": "A reusable component where tooltips slide smoothly between dock items, making the motion dock feel natural and easy to use.",
  "dependencies": [
    "motion",
    "clsx",
    "tw-merge"
  ],
  "files": [
    {
      "path": "components/(package)/motion-dock/motion-dock.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport {\r\n  useAnimate,\r\n  motion,\r\n  AnimatePresence,\r\n  usePresence,\r\n  useMotionValue,\r\n  Transition,\r\n  easeInOut,\r\n} from \"motion/react\";\r\n\r\nimport { usePrevious } from \"@/hooks/use-previous\";\r\nimport { useDebouncedState } from \"@/hooks/use-debounced-state\";\r\n\r\nimport { type HTMLMotionProps } from \"motion/react\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nexport interface DockItem extends Omit<HTMLMotionProps<\"button\">, \"ref\"> {\r\n  icon: React.ReactNode;\r\n  tooltip: string;\r\n}\r\n\r\nexport interface MotionDockProps {\r\n  dockItems: DockItem[];\r\n  className?: string;\r\n  style?: React.CSSProperties;\r\n}\r\n\r\ninterface TooltipsContainerProps {\r\n  dockRef: React.RefObject<HTMLDivElement>;\r\n  mouseIn: number;\r\n  tooltips: string[];\r\n}\r\n\r\nconst TRANSITION: Transition = {\r\n  duration: 0.225,\r\n  ease: easeInOut,\r\n};\r\nexport function MotionDock({ dockItems, className, style }: MotionDockProps) {\r\n  const [mouseIn, setMouseIn] = useDebouncedState<number>(0, 125);\r\n  const dockRef = React.useRef<HTMLDivElement>(null);\r\n  const handleReset = () => setMouseIn(0);\r\n  return (\r\n    <div className={cn(\"w-fit\", className, \"!relative\")} style={{ ...style }}>\r\n      <div\r\n        ref={dockRef}\r\n        className=\"bg-secondary flex gap-1 rounded-xl border p-1.25 shadow-[0_4px_6px_-1px_rgba(0,0,0,0.1),0_2px_4px_-2px_rgba(0,0,0,0.1)]\"\r\n        onMouseLeave={handleReset}\r\n        onBlur={() => mouseIn === dockItems?.length && handleReset()} //fix this blur\r\n      >\r\n        {dockItems.map(\r\n          ({ icon, tooltip, onMouseEnter, onFocus, className, ...rest }, i) => (\r\n            <motion.button\r\n              key={tooltip}\r\n              aria-label={tooltip}\r\n              onFocus={(e) => {\r\n                setMouseIn(i + 1);\r\n                onFocus?.(e);\r\n              }}\r\n              onMouseEnter={(e) => {\r\n                setMouseIn(i + 1);\r\n                onMouseEnter?.(e);\r\n              }}\r\n              data-tab={i + 1}\r\n              className={cn(\r\n                \"hover:bg-primary hover:text-primary-foreground focus-visible:bg-primary focus-visible:text-primary-foreground focus-visible:ring-ring bg-secondary text-secondary-foreground focus-visible:ring-offset-secondary cursor-pointer rounded-lg px-1 py-0.5 transition-colors duration-150 ease-out focus-visible:ring-1 focus-visible:ring-offset-2 focus-visible:outline-none sm:p-1 [&>svg]:size-5.5\",\r\n                className,\r\n              )}\r\n              {...rest}\r\n            >\r\n              {icon}\r\n            </motion.button>\r\n          ),\r\n        )}\r\n      </div>\r\n      <AnimatePresence>\r\n        {mouseIn && (\r\n          <ToolTipsContainer\r\n            mouseIn={mouseIn}\r\n            dockRef={dockRef as React.RefObject<HTMLDivElement>}\r\n            tooltips={dockItems?.map(({ tooltip }) => tooltip)}\r\n          />\r\n        )}\r\n      </AnimatePresence>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ToolTipsContainer({\r\n  dockRef,\r\n  mouseIn,\r\n  tooltips,\r\n}: TooltipsContainerProps) {\r\n  const prevMouseIn = usePrevious<number>(mouseIn);\r\n  const [isPresent, safeToRemove] = usePresence();\r\n  const [tooltipContainerScope, animate] = useAnimate();\r\n  const x = useMotionValue(0);\r\n\r\n  const getTranslateX = React.useCallback(\r\n    (mouseIn: number) => {\r\n      const hoveredTab = dockRef.current.querySelector(\r\n        `[data-tab=\"${mouseIn}\"]`,\r\n      );\r\n      const { left: tabLeft, width: tabWidth } =\r\n        hoveredTab!.getBoundingClientRect();\r\n      const finalPosition = tabLeft + tabWidth / 2;\r\n\r\n      const correspondingTooltip = tooltipContainerScope.current.querySelector(\r\n        `[data-tooltip=\"${mouseIn}\"]`,\r\n      );\r\n      const { left: tooltipLeft, width: tooltipWidth } =\r\n        correspondingTooltip!.getBoundingClientRect();\r\n      const currentPosition = tooltipLeft + tooltipWidth / 2;\r\n\r\n      const relativeTranslateX = finalPosition - currentPosition;\r\n      const translateX = relativeTranslateX + x.get();\r\n      return translateX;\r\n    },\r\n    [x, dockRef, tooltipContainerScope],\r\n  );\r\n\r\n  const getClipPath = React.useCallback(\r\n    (mouseIn: number) => {\r\n      let left = 0;\r\n      let right = 0;\r\n      for (let j = 1; j <= tooltips.length; j++) {\r\n        const { width } = tooltipContainerScope.current\r\n          .querySelector(`[data-tooltip=\"${j}\"]`)\r\n          .getBoundingClientRect();\r\n        if (j < mouseIn) {\r\n          left += width;\r\n        } else if (j > mouseIn) {\r\n          right += width;\r\n        }\r\n      }\r\n      const clipPath = `inset(0px ${right}px 0px ${left}px round var(--radius-sm))`; //border-radius for tooltip\r\n      return clipPath;\r\n    },\r\n    [tooltips.length, tooltipContainerScope],\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (isPresent) {\r\n      const keyframes = {\r\n        clipPath: getClipPath(mouseIn),\r\n        x: getTranslateX(mouseIn),\r\n      };\r\n      if (prevMouseIn === undefined) {\r\n        const enterAnimation = async () => {\r\n          await animate(tooltipContainerScope.current, keyframes, {\r\n            duration: 0,\r\n          });\r\n          await animate(\r\n            tooltipContainerScope.current,\r\n            { opacity: 1 },\r\n            TRANSITION,\r\n          );\r\n        };\r\n        enterAnimation();\r\n      } else {\r\n        const intermediateAnimation = () => {\r\n          animate(tooltipContainerScope.current, keyframes, TRANSITION);\r\n        };\r\n        intermediateAnimation();\r\n      }\r\n    } else {\r\n      const exitAnimation = async () => {\r\n        await animate(\r\n          tooltipContainerScope.current,\r\n          { opacity: 0 },\r\n          TRANSITION,\r\n        );\r\n        safeToRemove();\r\n      };\r\n      exitAnimation();\r\n    }\r\n  }, [\r\n    animate,\r\n    safeToRemove,\r\n    isPresent,\r\n    prevMouseIn,\r\n    mouseIn,\r\n    getClipPath,\r\n    getTranslateX,\r\n    tooltipContainerScope,\r\n  ]);\r\n\r\n  return (\r\n    <motion.div\r\n      ref={tooltipContainerScope}\r\n      style={{\r\n        x,\r\n      }}\r\n      initial={{\r\n        opacity: 0,\r\n      }}\r\n      className=\"bg-primary text-primary-foreground absolute bottom-[calc(100%_+_var(--spacing))] flex flex-nowrap py-0.5 text-xs sm:py-1\"\r\n    >\r\n      {tooltips.map((tooltip, i) => (\r\n        <div\r\n          key={tooltip + i}\r\n          className=\"px-1.5 text-nowrap whitespace-nowrap sm:px-2\"\r\n          data-tooltip={i + 1}\r\n        >\r\n          {tooltip}\r\n        </div>\r\n      ))}\r\n    </motion.div>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\nimport * as React from \"react\";\nimport { isValidElement } from \"react\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function assertOnlyChild(children: React.ReactNode) {\n  if (Array.isArray(children))\n    throw new Error(\n      \"A single child is required, but received multiple siblings.\",\n    );\n  if (\n    children &&\n    isValidElement(children) &&\n    children.type === React.Fragment &&\n    Array.isArray((children.props as React.FragmentProps).children)\n  )\n    throw new Error(\n      \"A single child is required; fragments that render multiple siblings are not allowed.\",\n    );\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "hooks/use-debounced-state.ts",
      "content": "import * as React from \"react\";\r\n\r\nexport function useDebouncedState<T>(initialValue: T, delay: number) {\r\n  const [state, setState] = React.useState(initialValue);\r\n  const timeoutRef = React.useRef<NodeJS.Timeout>(undefined);\r\n\r\n  const setDebouncedState = React.useCallback(\r\n    (newState: T) => {\r\n      clearTimeout(timeoutRef.current);\r\n      timeoutRef.current = setTimeout(() => setState(newState), delay);\r\n    },\r\n    [delay],\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    return () => clearTimeout(timeoutRef.current);\r\n  }, []);\r\n\r\n  return [state, setDebouncedState] as const;\r\n}\r\n",
      "type": "registry:hook"
    },
    {
      "path": "hooks/use-previous.ts",
      "content": "import * as React from \"react\";\r\n\r\nexport function usePrevious<T>(state: T): T | undefined {\r\n  const prevState = React.useRef<T | undefined>(undefined);\r\n  React.useEffect(() => {\r\n    prevState.current = state;\r\n  }, [state]);\r\n  return prevState.current;\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}