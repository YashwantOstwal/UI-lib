{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "text-switcher",
  "type": "registry:block",
  "title": "Text switcher",
  "description": "A reusable, fully responsive component that applies a smooth parallax effect to the provided child component. This popular design technique adds depth, creates an immersive experience, and makes your website feel more engaging.",
  "dependencies": [
    "motion",
    "clsx",
    "tw-merge"
  ],
  "files": [
    {
      "path": "components/(package)/text-switcher/text-switcher.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport {\r\n  AnimatePresence,\r\n  motion,\r\n  useMotionValue,\r\n  useTransform,\r\n  useVelocity,\r\n} from \"motion/react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface TextSwitcherProps {\r\n  words: Array<string>;\r\n  readTimeInSec?: number;\r\n  animationDurationInSec?: number;\r\n  className?: string;\r\n  style?: React.CSSProperties;\r\n}\r\n\r\nexport function TextSwitcher({\r\n  words,\r\n  animationDurationInSec = 0.4,\r\n  readTimeInSec = 2,\r\n  className,\r\n  style,\r\n}: TextSwitcherProps) {\r\n  const [currentIndex, setCurrentIndex] = React.useState(0);\r\n\r\n  const dotX = useMotionValue(\"100%\");\r\n  const dotXAsFloat = useTransform(dotX, (latest) => parseFloat(latest));\r\n  const dotVelocity = useVelocity(dotXAsFloat);\r\n\r\n  const dotScaleX = useTransform(dotVelocity, [-125, 0, 125], [3, 1, 3]);\r\n  const dotColor = useTransform(\r\n    dotVelocity,\r\n    [-100, 0, 100],\r\n    [\"var(--destructive)\", \"currentColor\", \"var(--destructive)\"],\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    const totalCycleTimeInMs =\r\n      (readTimeInSec + 2 * animationDurationInSec) * 1000;\r\n    const controlInterval = setInterval(() => {\r\n      setCurrentIndex((prevIndex) => (prevIndex + 1) % words.length);\r\n    }, totalCycleTimeInMs);\r\n\r\n    return () => clearInterval(controlInterval);\r\n  }, [words.length, readTimeInSec, animationDurationInSec]);\r\n\r\n  const containerVariants = {\r\n    animate: {\r\n      transition: {\r\n        staggerChildren: animationDurationInSec / words[currentIndex].length,\r\n      },\r\n    },\r\n    exit: {\r\n      transition: {\r\n        staggerChildren: animationDurationInSec / words[currentIndex].length,\r\n        staggerDirection: -1,\r\n      },\r\n    },\r\n  };\r\n\r\n  const letterVariants = {\r\n    initial: { scaleX: 0, opacity: 0 },\r\n    animate: { scaleX: 1, opacity: 1 },\r\n    exit: { scaleX: 0, opacity: 0 },\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={cn(\"!relative inline-block\", className)}\r\n      style={{ ...style }}\r\n    >\r\n      <AnimatePresence initial={false} mode=\"wait\">\r\n        <motion.div\r\n          key={currentIndex}\r\n          className=\"flex flex-nowrap whitespace-pre\"\r\n          variants={containerVariants}\r\n          initial=\"initial\"\r\n          animate=\"animate\"\r\n          exit=\"exit\"\r\n        >\r\n          {words[currentIndex].split(\"\").map((letter, index) => (\r\n            <motion.div\r\n              key={`${currentIndex}-${index}`}\r\n              className=\"origin-left\"\r\n              variants={letterVariants}\r\n              transition={{\r\n                duration: animationDurationInSec / words[currentIndex].length,\r\n              }}\r\n            >\r\n              {letter}\r\n            </motion.div>\r\n          ))}\r\n        </motion.div>\r\n      </AnimatePresence>\r\n\r\n      <AnimatePresence initial={false} mode=\"wait\">\r\n        <motion.div\r\n          key={`${currentIndex}-dot`}\r\n          style={{ left: dotX, scaleX: dotScaleX, color: dotColor }}\r\n          className=\"absolute inset-y-0\"\r\n          variants={{\r\n            initial: { left: \"0%\" },\r\n            animate: {\r\n              left: \"100%\",\r\n              transformOrigin: \"100% 50%\",\r\n              transition: {\r\n                duration: animationDurationInSec,\r\n                ease: [0.33, 1, 0.68, 1],\r\n              },\r\n            },\r\n            exit: {\r\n              left: \"0%\",\r\n              transformOrigin: \"0% 50%\",\r\n              transition: {\r\n                duration: animationDurationInSec,\r\n                ease: [0.32, 0, 0.67, 0],\r\n              },\r\n            },\r\n          }}\r\n          initial=\"initial\"\r\n          animate=\"animate\"\r\n          exit=\"exit\"\r\n        >\r\n          .\r\n        </motion.div>\r\n      </AnimatePresence>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\nimport * as React from \"react\";\nimport { isValidElement } from \"react\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function assertOnlyChild(children: React.ReactNode) {\n  if (Array.isArray(children))\n    throw new Error(\n      \"A single child is required, but received multiple siblings.\",\n    );\n  if (\n    children &&\n    isValidElement(children) &&\n    children.type === React.Fragment &&\n    Array.isArray((children.props as React.FragmentProps).children)\n  )\n    throw new Error(\n      \"A single child is required; fragments that render multiple siblings are not allowed.\",\n    );\n}\n",
      "type": "registry:lib"
    }
  ]
}