{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "in-page-navbar",
  "type": "registry:block",
  "title": "In-page navbar",
  "description": "A smart navigation bar that tracks the section progress as you scroll down the page, providing a clear visual indicator of your progress through each section. This Navbar is best suited for single-page applications (SPAs).",
  "dependencies": [
    "motion",
    "clsx",
    "tw-merge",
    "lucide-react"
  ],
  "files": [
    {
      "path": "components/(package)/in-page-navbar/in-page-navbar.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport {\r\n  AnimatePresence,\r\n  motion,\r\n  useScroll,\r\n  useTransform,\r\n  Variants,\r\n} from \"motion/react\";\r\nimport { EqualIcon, XIcon } from \"lucide-react\";\r\n\r\nimport { useIsServer } from \"@/hooks/use-is-server\";\r\nimport { type MotionValue } from \"motion\";\r\n\r\ninterface NavSection {\r\n  label: string;\r\n  id: string;\r\n}\r\n\r\ninterface NavButtonGroupProps {\r\n  sections: NavSection[];\r\n  isServer: boolean;\r\n  className?: string;\r\n}\r\n\r\ninterface NavItemProps extends NavSection {\r\n  scrollY: MotionValue<number>;\r\n  isServer: boolean;\r\n}\r\n\r\ninterface InPageNavbarProps {\r\n  logo: React.ReactNode;\r\n  sections: NavSection[];\r\n}\r\n\r\nconst fadeVariants: Variants = {\r\n  fadeIn: { opacity: 1 },\r\n  fadeOut: { opacity: 0 },\r\n};\r\n\r\nexport function InPageNavbar({ logo, sections }: InPageNavbarProps) {\r\n  const [isSidebarOpen, setIsSidebarOpen] = React.useState(false);\r\n  const [isSmallScreen, setIsSmallScreen] = React.useState(false);\r\n\r\n  const isServer = useIsServer();\r\n\r\n  const navButtons = (\r\n    <NavButtonGroup\r\n      sections={sections}\r\n      isServer={isServer}\r\n      className=\"gap-2 max-sm:mx-auto max-sm:grid max-sm:max-w-fit max-sm:grid-rows-3 max-sm:py-8 max-sm:text-sm sm:flex sm:items-center sm:gap-1\"\r\n    />\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    const handleMediaQuery = ({ matches }: { matches: boolean }) =>\r\n      setIsSmallScreen(matches);\r\n\r\n    const mediaQuery = window.matchMedia(\"(max-width:639px)\");\r\n    mediaQuery.addEventListener(\"change\", handleMediaQuery);\r\n\r\n    return () => mediaQuery.removeEventListener(\"change\", handleMediaQuery);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"[&_*]:focus-visible:ring-ring pointer-events-none fixed inset-x-4.5 top-1.5 z-[100] focus-visible:ring-offset-current [&_*]:focus-visible:ring-1 [&_*]:focus-visible:ring-offset-2 [&_*]:focus-visible:outline-none\">\r\n        <motion.div\r\n          initial={false}\r\n          animate={isSidebarOpen && isSmallScreen ? \"fadeOut\" : \"fadeIn\"}\r\n          variants={fadeVariants}\r\n          className=\"bg-card/85 pointer-events-auto mx-auto flex max-w-xl items-center justify-between rounded-lg p-3 text-sm font-medium shadow-md backdrop-blur-[2px] sm:rounded-xl\"\r\n        >\r\n          <a\r\n            href=\"#\"\r\n            tabIndex={1}\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              window.history.pushState(null, \"\", window.location.pathname);\r\n              window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n            }}\r\n          >\r\n            {logo}\r\n          </a>\r\n          <>\r\n            <nav className=\"hidden sm:block\">{navButtons}</nav>\r\n            <button\r\n              tabIndex={2}\r\n              aria-label=\"open sidebar\"\r\n              onClick={() => {\r\n                setIsSmallScreen(true);\r\n                setIsSidebarOpen(true);\r\n              }}\r\n              className=\"-mr-2 cursor-pointer px-1 sm:hidden\"\r\n            >\r\n              <EqualIcon className=\"stroke-foreground\" />\r\n            </button>\r\n          </>\r\n        </motion.div>\r\n      </div>\r\n      <AnimatePresence>\r\n        {isSmallScreen && isSidebarOpen && (\r\n          <motion.div\r\n            initial=\"fadeOut\"\r\n            animate=\"fadeIn\"\r\n            exit=\"fadeOut\"\r\n            variants={fadeVariants}\r\n            className=\"bg-card/85 fixed inset-x-4.5 top-1.5 z-[110] overflow-hidden rounded-lg\"\r\n          >\r\n            <button\r\n              tabIndex={3}\r\n              aria-label=\"close sidebar\"\r\n              onClick={() => setIsSidebarOpen(false)}\r\n              className=\"absolute top-3.5 right-2 cursor-pointer\"\r\n            >\r\n              <XIcon className=\"stroke-foreground\" />\r\n            </button>\r\n            <nav>{navButtons}</nav>\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction NavButtonGroup({\r\n  sections,\r\n  isServer,\r\n  className,\r\n}: NavButtonGroupProps) {\r\n  const { scrollY } = useScroll();\r\n\r\n  return (\r\n    <nav className={className}>\r\n      {sections.map((props) => (\r\n        <NavItem\r\n          key={props.id}\r\n          scrollY={scrollY}\r\n          isServer={isServer}\r\n          {...props}\r\n        />\r\n      ))}\r\n    </nav>\r\n  );\r\n}\r\n\r\nfunction NavItem({ label, id, isServer, scrollY }: NavItemProps) {\r\n  const [targetElement, setTargetElement] = React.useState<HTMLElement | null>(\r\n    null,\r\n  );\r\n\r\n  const sectionProgress = useTransform(scrollY, (latest) => {\r\n    if (isServer || !targetElement) return 0;\r\n\r\n    const viewportHeight = window.innerHeight;\r\n    const targetElementTop = targetElement.offsetTop;\r\n    const targetElementHeight = targetElement.offsetHeight;\r\n\r\n    const visibleRatio =\r\n      (latest + viewportHeight - targetElementTop) / targetElementHeight;\r\n\r\n    return Math.min(1, Math.max(visibleRatio, 0));\r\n  });\r\n\r\n  const clipPath = useTransform(\r\n    sectionProgress,\r\n    [0, 1],\r\n    [\"inset(0% 100% 0% 0%)\", \"inset(0% 0% 0% 0%)\"],\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    const element = document.getElementById(id);\r\n    if (!element) {\r\n      console.warn(`No section found with id=\"${id}\".`);\r\n    }\r\n    setTargetElement(element);\r\n  }, [id]);\r\n\r\n  return (\r\n    <a\r\n      tabIndex={2}\r\n      href={`#${id}`}\r\n      onClick={(e) => {\r\n        e.preventDefault();\r\n        window.history.pushState(null, \"\", `#${id}`);\r\n        targetElement?.scrollIntoView({ behavior: \"smooth\" });\r\n      }}\r\n      className=\"bg-background border-border relative overflow-hidden rounded-full border font-medium capitalize transition-opacity duration-100 ease-in-out hover:opacity-70 sm:text-[13px]\"\r\n    >\r\n      <span className=\"relative z-20 inline-block size-full px-4 py-2.5 text-center leading-none sm:px-3 sm:py-2\">\r\n        {label}\r\n      </span>\r\n\r\n      {targetElement && (\r\n        <motion.span\r\n          initial=\"fadeOut\"\r\n          animate=\"fadeIn\"\r\n          variants={fadeVariants}\r\n          style={{ clipPath }}\r\n          className=\"bg-muted text-muted-foreground absolute -inset-0.5 z-30 grid place-items-center rounded-[inherit] leading-none\"\r\n        >\r\n          {label}\r\n        </motion.span>\r\n      )}\r\n    </a>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\nimport * as React from \"react\";\nimport { isValidElement } from \"react\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function assertOnlyChild(children: React.ReactNode) {\n  if (Array.isArray(children))\n    throw new Error(\n      \"A single child is required, but received multiple siblings.\",\n    );\n  if (\n    children &&\n    isValidElement(children) &&\n    children.type === React.Fragment &&\n    Array.isArray((children.props as React.FragmentProps).children)\n  )\n    throw new Error(\n      \"A single child is required; fragments that render multiple siblings are not allowed.\",\n    );\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "hooks/use-is-server.ts",
      "content": "import * as React from \"react\";\r\n\r\nexport function useIsServer() {\r\n  const isServer = React.useRef(typeof window === \"undefined\");\r\n  return isServer.current;\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}