{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "parallax-cards",
  "type": "registry:block",
  "title": "Parallax cards",
  "description": "A reusable and responsive component that adds a modern parallax effect to your website, making it ideal for showcasing a list of content blocks or features.",
  "dependencies": [
    "motion",
    "clsx",
    "tw-merge"
  ],
  "files": [
    {
      "path": "components/(package)/parallax-cards/parallax-cards.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { useScroll, useTransform, motion } from \"motion/react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nimport type { MotionValue } from \"motion\";\r\n\r\ninterface ParallaxCardsProps {\r\n  children: React.ReactNode[];\r\n  maxStackedCards?: number;\r\n  top?: string;\r\n  forceParallax?: boolean;\r\n  style?: React.CSSProperties;\r\n  className?: string;\r\n}\r\n\r\ninterface CardProps {\r\n  index: number;\r\n  scrollYProgress: MotionValue<number>;\r\n  maxStackedCards: number;\r\n  totalCards: number;\r\n  children: React.ReactNode | string;\r\n  top: string;\r\n  sticky: boolean;\r\n  forceParallax: boolean;\r\n}\r\n\r\nexport function ParallaxCards({\r\n  maxStackedCards = 3,\r\n  top = \"30px\",\r\n  forceParallax = false,\r\n  className,\r\n  style,\r\n  children,\r\n}: ParallaxCardsProps) {\r\n  const containerRef = React.useRef<HTMLDivElement>(null);\r\n\r\n  const [sticky, setSticky] = React.useState(true);\r\n\r\n  const { scrollYProgress } = useScroll({\r\n    target: containerRef,\r\n    offset: [\"start start\", \"end start\"],\r\n  });\r\n\r\n  const totalCards = children.length;\r\n\r\n  React.useEffect(() => {\r\n    if (forceParallax) return;\r\n\r\n    const element = containerRef.current;\r\n    if (!element) return;\r\n\r\n    const handleMediaQuery = ({ matches }: { matches: boolean }) =>\r\n      setSticky(matches);\r\n\r\n    const cardHeight = element.getBoundingClientRect().height / totalCards;\r\n    const mediaQuery = window.matchMedia(`(min-height : ${cardHeight}px)`); // should add resize listener if childâ€™s height is dynamic\r\n\r\n    handleMediaQuery(mediaQuery);\r\n    mediaQuery.addEventListener(\"change\", handleMediaQuery);\r\n\r\n    return () => mediaQuery.removeEventListener(\"change\", handleMediaQuery);\r\n  }, [totalCards, forceParallax]);\r\n\r\n  return (\r\n    <>\r\n      <style>{`\r\n        html {\r\n          scroll-behavior: smooth;\r\n        }\r\n      `}</style>\r\n      <motion.div\r\n        ref={containerRef}\r\n        className={cn(\"relative w-full !py-0\", className)}\r\n        style={{\r\n          display: \"grid\",\r\n          gridTemplateRows: `repeat(${totalCards},1fr)`,\r\n          ...style,\r\n        }}\r\n      >\r\n        {children.map((child, index) => (\r\n          <Card\r\n            key={`cards[${index}]`}\r\n            index={index}\r\n            scrollYProgress={scrollYProgress}\r\n            totalCards={totalCards}\r\n            maxStackedCards={maxStackedCards}\r\n            top={top}\r\n            sticky={sticky}\r\n            forceParallax={forceParallax}\r\n          >\r\n            {child}\r\n          </Card>\r\n        ))}\r\n      </motion.div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst Card = ({\r\n  index,\r\n  scrollYProgress,\r\n  maxStackedCards,\r\n  totalCards,\r\n  children,\r\n  top,\r\n  sticky,\r\n  forceParallax,\r\n}: CardProps) => {\r\n  const topMagnitude = parseFloat(top);\r\n  const topUnit = top.slice(String(topMagnitude).length) || \"px\";\r\n\r\n  if (topUnit == \"%\") throw new Error(\"% as spacing unit is not supported.\");\r\n\r\n  const fullTop = topMagnitude + topUnit;\r\n  const scrollRatio = 1 / totalCards;\r\n\r\n  const y = useTransform(\r\n    scrollYProgress,\r\n    [\r\n      index * scrollRatio,\r\n      (index + maxStackedCards - 1) * scrollRatio,\r\n      (index + maxStackedCards) * scrollRatio,\r\n    ],\r\n    [\r\n      \"0\",\r\n      `-${fullTop}`,\r\n      `${-topMagnitude - topMagnitude / (maxStackedCards - 1)}${topUnit}`, // 0, -top, -top - top/(maxStackedCards - 1)\r\n    ],\r\n  );\r\n\r\n  const scale = useTransform(\r\n    scrollYProgress,\r\n    [index * scrollRatio, (index + maxStackedCards) * scrollRatio],\r\n    [1, 0.85],\r\n  );\r\n\r\n  const opacity = useTransform(\r\n    scrollYProgress,\r\n    [\r\n      (index + maxStackedCards - 1) * scrollRatio,\r\n      (index + maxStackedCards) * scrollRatio,\r\n    ],\r\n    [1, 0],\r\n  );\r\n\r\n  return (\r\n    <motion.div\r\n      style={{\r\n        paddingTop: fullTop,\r\n        position: sticky ? \"sticky\" : \"relative\",\r\n      }}\r\n      className=\"top-0 w-full px-3\"\r\n    >\r\n      <motion.div\r\n        style={\r\n          sticky\r\n            ? {\r\n                scale,\r\n                opacity,\r\n                y,\r\n                maxHeight: forceParallax\r\n                  ? `calc(100svh - ${fullTop})`\r\n                  : undefined,\r\n              }\r\n            : undefined\r\n        }\r\n        className=\"grid size-full origin-top overflow-hidden\"\r\n      >\r\n        {children}\r\n      </motion.div>\r\n    </motion.div>\r\n  );\r\n};\r\n",
      "type": "registry:component"
    },
    {
      "path": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\nimport * as React from \"react\";\nimport { isValidElement } from \"react\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function assertOnlyChild(children: React.ReactNode) {\n  if (Array.isArray(children))\n    throw new Error(\n      \"A single child is required, but received multiple siblings.\",\n    );\n  if (\n    children &&\n    isValidElement(children) &&\n    children.type === React.Fragment &&\n    Array.isArray((children.props as React.FragmentProps).children)\n  )\n    throw new Error(\n      \"A single child is required; fragments that render multiple siblings are not allowed.\",\n    );\n}\n",
      "type": "registry:lib"
    }
  ]
}